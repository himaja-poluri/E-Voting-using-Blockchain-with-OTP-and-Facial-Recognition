{"ast":null,"code":"var _jsxFileName = \"E:\\\\Teja\\\\College\\\\sem8\\\\final-year-project\\\\src\\\\Components\\\\VoterIDSubmission.js\";\nimport React, { Component } from 'react';\nimport \"../css/components/voterIdSubmission.css\";\nimport { ELECTION_ADDRESS, ELECTION_ABI } from \"../config\";\nimport Election from \"../build/Election.json\";\nimport Web3 from 'web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass VoterIDSubmission extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      voterID: \"\",\n      statusCode: 404\n    };\n    this.apiForVoterDetails = async () => {\n      try {\n        const response = await fetch(\"/getvoterdetails\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            voterID: this.state.voterID\n          })\n        });\n        const data = await response.json();\n        this.state.statusCode = 200;\n        return data;\n      } catch (err) {\n        this.state.statusCode = 404;\n        console.log(err);\n      }\n    };\n    this.getVoterDetails = () => {\n      this.apiForVoterDetails().then(data => {\n        console.log(data);\n        this.props.setVoterDetails(data[0], this.state.statusCode);\n      });\n    };\n  }\n  async componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockChainData();\n  }\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n    }\n  }\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    console.log(accounts);\n    this.setState({\n      account: accounts[0]\n    });\n    const networkId = await web3.eth.net.getId();\n    const networkData = Election.networks[networkId];\n    if (networkData) {\n      const election = new web3.eth.Contract(Election.abi, networkData.address);\n      this.setState({\n        election\n      });\n      const candCount = await election.methods.candidatesCount().call();\n      this.setState({\n        candCount\n      });\n      for (var i = 1; i <= candCount; i++) {\n        const candidates = await election.methods.candidates(i).call();\n        if (candidates.election_id === this.state.id) {\n          this.setState({\n            candidates: [...this.state.candidates, candidates]\n          });\n        }\n      }\n      console.log(this.state.candidates);\n    } else {\n      window.alert('Election contract not deployed to detected network.');\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voterIDSubMainDiv\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"passwordTxtDivVIDSub\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"voterIDTxtVIDSub\",\n          children: \"Enter your Voter ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"inputForPassVIDSub\",\n        onChange: e => {\n          this.setState({\n            voterID: e.target.value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submitButtonVIDSub\",\n        onClick: this.getVoterDetails,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this);\n  }\n}\nexport default VoterIDSubmission;","map":{"version":3,"names":["React","Component","ELECTION_ADDRESS","ELECTION_ABI","Election","Web3","jsxDEV","_jsxDEV","VoterIDSubmission","constructor","arguments","state","voterID","statusCode","apiForVoterDetails","response","fetch","method","headers","body","JSON","stringify","data","json","err","console","log","getVoterDetails","then","props","setVoterDetails","componentWillMount","loadWeb3","loadBlockChainData","window","ethereum","web3","enable","currentProvider","alert","loadBlockchainData","accounts","eth","getAccounts","setState","account","networkId","net","getId","networkData","networks","election","Contract","abi","address","candCount","methods","candidatesCount","call","i","candidates","election_id","id","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","onClick"],"sources":["E:/Teja/College/sem8/final-year-project/src/Components/VoterIDSubmission.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport \"../css/components/voterIdSubmission.css\"\r\nimport {ELECTION_ADDRESS,ELECTION_ABI} from \"../config\";\r\nimport Election from \"../build/Election.json\";\r\nimport Web3 from 'web3';\r\nclass VoterIDSubmission extends React.Component{\r\n    state={\r\n        voterID:\"\",\r\n        statusCode:404,\r\n    }\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockChainData()\r\n    }\r\n    async loadWeb3() {\r\n        if (window.ethereum) {\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        }\r\n        else if (window.web3) {\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n        else {\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        console.log(accounts)\r\n        this.setState({ account: accounts[0] })\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = Election.networks[networkId]\r\n        if(networkData) {\r\n            const election = new web3.eth.Contract(Election.abi, networkData.address)\r\n            this.setState({ election })\r\n            const candCount = await election.methods.candidatesCount().call()\r\n            this.setState({ candCount })\r\n            for (var i = 1; i <= candCount; i++) {\r\n                const candidates = await election.methods.candidates(i).call()\r\n                if(candidates.election_id === this.state.id){\r\n                    this.setState({\r\n                        candidates: [...this.state.candidates, candidates]\r\n                    })\r\n                }\r\n            }\r\n            console.log(this.state.candidates)\r\n        } else {\r\n            window.alert('Election contract not deployed to detected network.')\r\n        }\r\n    }\r\n\r\n\r\n\r\n    apiForVoterDetails=async ()=>{\r\n        try{\r\n            const response=await fetch(\"/getvoterdetails\",\r\n            {\r\n                method:\"POST\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\"\r\n                },\r\n                body:JSON.stringify({\r\n                    voterID:this.state.voterID\r\n                })\r\n            })\r\n            const data=await response.json();\r\n            this.state.statusCode=200;\r\n            return data;\r\n        }\r\n        catch(err){\r\n            this.state.statusCode=404;\r\n            console.log(err);\r\n        }\r\n    }\r\n    getVoterDetails=()=>{\r\n        this.apiForVoterDetails().then((data)=>{\r\n            console.log(data)\r\n            this.props.setVoterDetails(data[0],this.state.statusCode);\r\n        })\r\n    } \r\n\r\n\r\n    render(){ \r\n        return(\r\n        <div className='voterIDSubMainDiv'>\r\n            <div className=\"passwordTxtDivVIDSub\">         \r\n                <span className='voterIDTxtVIDSub'>Enter your Voter ID</span>                 \r\n            </div>\r\n            <input className='inputForPassVIDSub' onChange={(e)=>{this.setState({voterID:e.target.value})}}></input>\r\n            <button className='submitButtonVIDSub' onClick={this.getVoterDetails}>Submit</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VoterIDSubmission;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}